prototype(Shel.Neos.Logs:View.ShowLogfile) < prototype(Neos.Fusion:Component) {
    filename = ${filename}
    entries = ${entries}
    level = ${level}
    levels = ${levels}
    csrfToken = ${csrfToken}
    lineCount = ${lineCount}
    limit = ${limit}

    levelColors = Neos.Fusion:DataStructure {
        DEBUG = '#bbb'
        ERROR = '#f55'
        INFO = '#55f'
        EMERGENCY = '#f55'
        NOTICE = '#fff'
        WARNING = '#f50'
        CRITICAL = '#f55'
        ALERT = '#f55'
    }

    renderer = afx`
        <div class="neos-content neos-container-fluid">
            <div class="neos-row-fluid">
                <h2>Log file {props.filename}</h2>
                <br/>
                <form method="POST">
                    <Neos.Fusion:UriBuilder action="showLogfile" arguments={{'filename': props.filename}} @path="attributes.action" />
                    <input type="hidden" name="moduleArguments[filename]" value={props.filename} />
                    <input type="hidden" name="__csrfToken" value={String.htmlSpecialChars(props.csrfToken)}/>
                    <select name="moduleArguments[level]" onchange="this.form.submit();">
                        <option value="" selected="selected" selected.@if.none={!props.level}>All</option>
                        <Neos.Fusion:Loop items={props.levels}>
                            <option value={item} selected="selected" selected.@if.current={item == props.level}>
                                {item}
                            </option>
                        </Neos.Fusion:Loop>
                    </select>
                    <select name="moduleArguments[limit]" onchange="this.form.submit();" style="margin-left:1rem;">
                        <option value={props.limit} selected="selected">Showing {props.limit} entries</option>
                        <option value="50" @if.possible={props.lineCount > 50}>Show 50 entries</option>
                        <option value="100" @if.possible={props.lineCount > 100}>Show 100 entries</option>
                        <option value="300" @if.possible={props.lineCount > 300}>Show 300 entries</option>
                        <option value={props.lineCount}>Show all {props.lineCount} entries</option>
                    </select>
                </form>
                <br/>
                <div class="table-wrap" @if.hasEntries={props.entries}>
                    <table class="log-entry-table">
                        <thead>
                            <tr class="header-row">
                                <th class="column__date">Date</th>
                                <th class="column__ip" @if.hasIp={props.entries[0].ip}>IP</th>
                                <th class="column__type">Type</th>
                                <th class="column__details">Details</th>
                            </tr>
                        </thead>
                        <tbody class="table-body">
                            <Neos.Fusion:Loop items={props.entries} itemName="entry">
                                <tr style={'color:' + props.levelColors[entry.level]}>
                                    <td class="column__date">{entry.date}</td>
                                    <td class="column__ip" @if.hasIp={entry.ip}>{entry.ip}</td>
                                    <td class="column__type">{entry.level}</td>
                                    <td class="column__details">{entry.message}</td>
                                </tr>
                            </Neos.Fusion:Loop>
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="neos-footer">
                <a class="neos-button">
                    <Neos.Fusion:UriBuilder @path="attributes.href" action="index" />
                    {I18n.id('Shel.Neos.Logs:Modules:action.back').value('Back').translate()}
                </a>
                <a class="neos-button">
                    <Neos.Fusion:UriBuilder
                        @path="attributes.href"
                        action="downloadLogfile"
                        arguments={{'filename': props.filename}}
                    />
                    {I18n.id('Shel.Neos.Logs:Modules:action.download').value('Download').translate()}
                </a>
            </div>
        </div>
        <Shel.Neos.Logs:Component.FlashMessages flashMessages={props.flashMessages} />
    `
}
